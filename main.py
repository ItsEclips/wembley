
from keep_alive import keep_alive

import discord
from discord import app_commands
from discord.ext import commands
import aiosqlite
import asyncio
from datetime import datetime, timedelta
import random

DATABASE = "bar.db"
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree  # For slash commands

@bot.event
async def on_ready():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                last_daily TEXT
            )
        """)
        await db.commit()

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Watching
    await tree.sync()
    print(f"‚úÖ Logged in as {bot.user}")
    
    if bot.guilds:
        guild_name = bot.guilds[0].name
    else:
        guild_name = "this server"

    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching,
        name=guild_name
    ))

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
async def ensure_user(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await db.commit()

# /balance
@tree.command(name="balance", description="‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ChillCoin ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
async def balance(interaction: discord.Interaction):
    await ensure_user(interaction.user.id)
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (interaction.user.id,)) as cursor:
            row = await cursor.fetchone()
            await interaction.response.send_message(f"üí∞ {interaction.user.display_name} ‡∏°‡∏µ {row[0]} ChillCoin", ephemeral=True)

# /work
@tree.command(name="work", description="‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô ChillCoin")
async def work(interaction: discord.Interaction):
    await ensure_user(interaction.user.id)
    earned = random.randint(15, 25)
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (earned, interaction.user.id))
        await db.commit()
    await interaction.response.send_message(f"üçπ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Bartender ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ {earned} ChillCoin!")

# /daily
@tree.command(name="daily", description="‡∏£‡∏±‡∏ö ChillCoin ‡∏ü‡∏£‡∏µ‡∏ß‡∏±‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
async def daily(interaction: discord.Interaction):
    await ensure_user(interaction.user.id)
    async with aiosqlite.connect(DATABASE) as db:
        async with db.execute("SELECT last_daily FROM users WHERE user_id = ?", (interaction.user.id,)) as cursor:
            row = await cursor.fetchone()
            now = datetime.utcnow()
            if row[0] is not None:
                last_claimed = datetime.fromisoformat(row[0])
                if now - last_claimed < timedelta(hours=24):
                    next_time = last_claimed + timedelta(hours=24)
                    remain = next_time - now
                    await interaction.response.send_message(
                        f"‚è≥ ‡∏£‡∏±‡∏ö daily ‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡πÉ‡∏ô {remain.seconds // 3600} ‡∏ä‡∏°.", ephemeral=True)
                    return
        await db.execute("UPDATE users SET balance = balance + 100, last_daily = ? WHERE user_id = ?",
                         (now.isoformat(), interaction.user.id))
        await db.commit()
    await interaction.response.send_message("üéÅ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 100 ChillCoin ‡∏à‡∏≤‡∏Å‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô!")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
keep_alive()  # ‡πÉ‡∏™‡πà‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô bot.run()
import os
bot.run(os.getenv("DISCORD_TOKEN"))  # ‚úÖ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
